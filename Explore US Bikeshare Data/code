
import pandas as pd
import numpy as np
import time

#data location
CITY_DATA = { 'chicago': 'chicago.csv',
              'newyorkcity': 'new_york_city.csv',
              'washington': 'washington.csv' }

#months from 1 : 6
months = ['january', 'february', 'march', 'april', 'may', 'june']

 
#get_Filters function
def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        #get city name
        city = input('Enter name of the city to analyze [chicago, new york city, washington]: ').lower().replace(' ' , '')
        if (city in CITY_DATA):
            break
            
    # get user input for month (all, january, february, ... , june)
    while True:
            #get month name
            month = input("Enter name of the month to filter by, or 'all' to apply no month filter ,months between [january - june] : " ).lower()
            if month in  ['all', 'january', 'february', 'march', 'april', 'may', 'june']:
                break
        
    # get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        #get day name
        day = input("Enter name of the day of week to filter by, or 'all' to apply no day filter: ").lower()
        if day in ['all','monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'] :
            break

    print('-'*40)
    return city, month, day


#load_data function
def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    # load data file into a dataframe
    
    df= pd.read_csv(CITY_DATA[city])
    
    #convert Start Time column to datetime 
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    
    #create month column
    df['month'] = df['Start Time'].dt.month
    
    #create day column 
    df['day_of_week'] = df['Start Time'].dt.day_name()
    
    #create hour column 
    df['hour'] = df['Start Time'].dt.hour
    
    #filter by month if applicable
    if month != 'all':
        #find  the month number 
        month = months.index(month) + 1
        
        #do filter with month
        df =  df[df['month'] == month]
        
        
    #filter by day if applicable
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]
    
    return df

#1 Popular times of travel
#time_stats function
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    #display the most common month    
    most_Common_month = df['month'].mode()[0]
    #show the name of most common month
    for index , mon in enumerate(months):
        if index+ 1 ==  most_Common_month:
             print('the most common month is :' + mon)
                   
    # display the most common day of week
    most_common_day = df['day_of_week'].mode()[0]
    print('the most common day of week is :' + str(most_common_day))

    # display the most common start hour
    most_common_hour = df['hour'].mode()[0]
    print('the most common start hour is :' + str(most_common_hour))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
#2 Popular stations and trip
#station_stats function
def station_stats(df , city ):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    most_commonly_start_station =  df['Start Station'].mode()[0]
    print('most commonly used start station is :' + str(most_commonly_start_station))
    
    #show number of occurance of most common start station
    occurance_number =  df['Start Station'].value_counts()[0]
    print('the count of occurrences of the most common Start Station is: ' + str(occurance_number))
    
    
    # display most commonly used end station
    most_commonly_end_station =  df['End Station'].mode()[0]
    print('most commonly used end station is : '+ str(most_commonly_end_station))

    #show number of occurance of most common End station
    occurance_number =  df['End Station'].value_counts()[0]
    print('the count of occurrences of the most common End Station is : ' + str(occurance_number))
    

    #display most frequent combination of start station and end station trip
    #trip = Start Station + End Station    
    df['trip'] = df['Start Station'] + ' To ' + df['End Station']
    #most_common_trip 
    most_common_trip = df['trip'].mode()[0]
    print('most common trip from Start to End is From ' +  str(most_common_trip))

    #show number of occurance of most common trip
    occurance_number =  df['trip'].value_counts()[0]
    print('the count of occurrences of the most common trip is : ' + str(occurance_number))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

    
#3 Trip duration
#trip_duration_stats 
def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_time=  df['Trip Duration'].sum()
     
    #divmod method to find number of hours , mins , seconds
    minute, second = divmod(total_time, 60) 
    hour, minute = divmod(minute, 60)  
    print('total travel time is ' + str(hour) + ' hour and ' + str(minute) + ' minutes and ' + str(second) + ' seconds')
    print()
    
    # display mean travel time
    average_time = df['Trip Duration'].mean()
    minute2, second2 = divmod(average_time, 60) 
    hour2, minute2 = divmod(minute, 60)
    
    #check if number of hours greater than 0
    if hour2 > 0 :
        print('average travel time is ' + str(hour2) + ' hour and ' + str(minute2) + ' minute and '+ str(second2) + ' second')
    
    else:
        print('average travel time is ' +  str(minute2) + ' minute and '+ str(second2) + ' second')
        
        
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

##4 User info    
#user_stats function
def user_stats(df , city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print('counts of each user type: ')
    user_types = df['User Type'].value_counts()
    print('Subscriber: '+ str(user_types[0]) )
    print('Customer: ' + str(user_types[1]) )
    print()
    
    # ***Display counts of gender***
    #(only available for NYC and Chicago)
    #check if city not equal Washington
    if city != 'washington':
        print('counts of each gender :')
        gender_count = df['Gender'].value_counts()
        print('Male: '+str(gender_count[0]))
        print('Female: '+str(gender_count[1]))
        print()
    
    
        #***Display earliest, most recent, and most common year of birth***
        #check if city not equal Washington
    
        #earliest year of birth
        earliest_year = int(df['Birth Year'].min())
        print('Earliest year is ' + str(earliest_year))
        
        #most recent year of birth
        most_recent_year = int(df['Birth Year'].max())
        print('most recent year of birth is ' + str(most_recent_year))
        
        #most common year of birth
        most_common_year_of_birth= int(df['Birth Year'].mode()[0])
        print('Most common year of birth is ' + str(most_common_year_of_birth))
    

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

#5 funcion used to show data 
def show_data(df , i ):
    
    #iloc to print row at current_index 
    while (True):
        
        if (len(df) == 0 or i == len(df)):
            break
        
        print('row number ' + str(i + 1))
        print() 
        print(df.iloc[i])
        print('\n')
        i +=1 
        if (i % 5 == 0 ):
            s = input('Do you want to continue showing data .enter yes or no: ').lower()
            if s == 'no':
                break


#Useful functions
#Design Function
def design():
    choice = ''
    while True:
        #Menue
        print('Explore Data')
        print("#1 Display Popular Times Of Travel")
        print("#2 Display Popular Stations And Trip")
        print("#3 Display Trip Duration")
        print("#4 Display User Info")
        print("#5 To Stop explore\n")
        #take user choice
        choice = input("choice number from [1 :  5]: ")
        #check user choice   
        if choice in  ['1' , '2' ,'3' ,'4' , '5']:
                break
        
    return choice
    
#check if  user want to end the program or continue
def solve():
           
    #check if  user want to end the program        
    while True:
        check_user_choice= input("Do you want to continue explor data? Enter yes or no : ").lower()
        if check_user_choice == 'yes' or check_user_choice == 'no':
            break
        
    return check_user_choice
        
          
#main Function

def main():
    i = 0 
    while True:
        city, month, day = get_filters()
        #print city name of user 
        print('you entered ' + city + ' city')
        print(" ")
        df = load_data(city, month, day)

        #take  user choice 
        while True:
            user_choice = design()
            if user_choice == '1':
                time_stats(df)
                if solve() == 'no':
                    break
                
            elif user_choice == '2':
                station_stats(df , city)
                if solve() == 'no':
                    break
                
            elif user_choice == '3':
                trip_duration_stats(df)
                if solve() == 'no':
                    break
            elif user_choice == '4' :
                user_stats(df , city)
                if solve() == 'no':
                    break
            else :
                break
        s = input('Do you want to show data .enter yes or no: ').lower()
        if s == 'yes':
            show_data(df , 0)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            print('Prorgram end')
            print(" ")
            break
        

#Run Script
if __name__ == "__main__":
    main()
